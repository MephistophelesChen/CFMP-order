#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# CFMP订单系统路由配置
routes:
  # 订单服务路由
  - id: order-service
    name: "订单服务"
    uri: /api/orders/*
    upstream:
      nodes:
        "order-service:8001": 1
      type: roundrobin
    plugins:
      proxy-rewrite:
        regex_uri: ["^/api/orders/(.*)", "/api/orders/$1"]
      # JWT认证插件 - 解析JWT并添加用户信息到请求头
      jwt-auth:
        header: Authorization
        query: jwt
        cookie: jwt
        hide_credentials: false
      # 请求重写插件 - 添加用户UUID到请求头
      serverless-pre-function:
        phase: rewrite
        functions:
          - |
            return function(conf, ctx)
              local core = require("apisix.core")
              local jwt = require("resty.jwt")

              -- 从Authorization头获取JWT token
              local auth_header = core.request.header(ctx, "Authorization")
              if auth_header and string.find(auth_header, "Bearer ") then
                local token = string.sub(auth_header, 8)

                -- 解析JWT token（这里需要根据实际JWT secret配置）
                local jwt_obj = jwt:verify("your-jwt-secret", token)
                if jwt_obj and jwt_obj.valid then
                  local user_uuid = jwt_obj.payload.user_uuid or jwt_obj.payload.sub
                  if user_uuid then
                    -- 添加用户UUID到请求头
                    core.request.set_header(ctx, "X-User-UUID", user_uuid)
                    core.log.info("设置用户UUID: ", user_uuid)
                  end
                end
              end
            end

  # 支付服务路由
  - id: payment-service
    name: "支付服务"
    uri: /api/payments/*
    upstream:
      nodes:
        "payment-service:8002": 1
      type: roundrobin
    plugins:
      proxy-rewrite:
        regex_uri: ["^/api/payments/(.*)", "/api/payments/$1"]
      # JWT认证插件
      jwt-auth:
        header: Authorization
        query: jwt
        cookie: jwt
        hide_credentials: false
      # 添加用户UUID到请求头
      serverless-pre-function:
        phase: rewrite
        functions:
          - |
            return function(conf, ctx)
              local core = require("apisix.core")
              local jwt = require("resty.jwt")

              local auth_header = core.request.header(ctx, "Authorization")
              if auth_header and string.find(auth_header, "Bearer ") then
                local token = string.sub(auth_header, 8)
                local jwt_obj = jwt:verify("your-jwt-secret", token)
                if jwt_obj and jwt_obj.valid then
                  local user_uuid = jwt_obj.payload.user_uuid or jwt_obj.payload.sub
                  if user_uuid then
                    core.request.set_header(ctx, "X-User-UUID", user_uuid)
                    core.log.info("设置用户UUID: ", user_uuid)
                  end
                end
              end
            end

  # 通知服务路由
  - id: notification-service
    name: "通知服务"
    uri: /api/notifications/*
    upstream:
      nodes:
        "notification-service:8004": 1
      type: roundrobin
    plugins:
      proxy-rewrite:
        regex_uri: ["^/api/notifications/(.*)", "/api/notifications/$1"]
      # JWT认证插件
      jwt-auth:
        header: Authorization
        query: jwt
        cookie: jwt
        hide_credentials: false
      # 添加用户UUID到请求头
      serverless-pre-function:
        phase: rewrite
        functions:
          - |
            return function(conf, ctx)
              local core = require("apisix.core")
              local jwt = require("resty.jwt")

              local auth_header = core.request.header(ctx, "Authorization")
              if auth_header and string.find(auth_header, "Bearer ") then
                local token = string.sub(auth_header, 8)
                local jwt_obj = jwt:verify("your-jwt-secret", token)
                if jwt_obj and jwt_obj.valid then
                  local user_uuid = jwt_obj.payload.user_uuid or jwt_obj.payload.sub
                  if user_uuid then
                    core.request.set_header(ctx, "X-User-UUID", user_uuid)
                    core.log.info("设置用户UUID: ", user_uuid)
                  end
                end
              end
            end

  # 安全策略路由（风险评估、欺诈检测）
  - id: security-service
    name: "安全服务"
    uri: /api/security/*
    upstream:
      nodes:
        "notification-service:8004": 1  # 暂时复用notification-service
      type: roundrobin
    plugins:
      proxy-rewrite:
        regex_uri: ["^/api/security/(.*)", "/api/security/$1"]
      # JWT认证插件
      jwt-auth:
        header: Authorization
        query: jwt
        cookie: jwt
        hide_credentials: false
      # 添加用户UUID到请求头
      serverless-pre-function:
        phase: rewrite
        functions:
          - |
            return function(conf, ctx)
              local core = require("apisix.core")
              local jwt = require("resty.jwt")

              local auth_header = core.request.header(ctx, "Authorization")
              if auth_header and string.find(auth_header, "Bearer ") then
                local token = string.sub(auth_header, 8)
                local jwt_obj = jwt:verify("your-jwt-secret", token)
                if jwt_obj and jwt_obj.valid then
                  local user_uuid = jwt_obj.payload.user_uuid or jwt_obj.payload.sub
                  if user_uuid then
                    core.request.set_header(ctx, "X-User-UUID", user_uuid)
                    core.log.info("设置用户UUID: ", user_uuid)
                  end
                end
              end
            end

# 上游服务定义
upstreams:
  - id: order-service-upstream
    name: "订单服务上游"
    nodes:
      "order-service:8001": 1
    type: roundrobin
    checks:
      active:
        timeout: 5
        http_path: "/health"
        healthy:
          interval: 2
          successes: 1
        unhealthy:
          interval: 1
          http_failures: 2

  - id: payment-service-upstream
    name: "支付服务上游"
    nodes:
      "payment-service:8002": 1
    type: roundrobin
    checks:
      active:
        timeout: 5
        http_path: "/health"
        healthy:
          interval: 2
          successes: 1
        unhealthy:
          interval: 1
          http_failures: 2

  - id: notification-service-upstream
    name: "通知服务上游"
    nodes:
      "notification-service:8004": 1
    type: roundrobin
    checks:
      active:
        timeout: 5
        http_path: "/health"
        healthy:
          interval: 2
          successes: 1
        unhealthy:
          interval: 1
          http_failures: 2

# 全局规则
global_rules:
  - id: global-limit-req
    plugins:
      limit-req:
        rate: 500
        burst: 1000
        rejected_code: 503
        rejected_msg: "Requests are too frequent, please try again later."

#END
